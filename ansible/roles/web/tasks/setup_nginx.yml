---

- name: Add Nginx repo
  apt_repository:
    repo: ppa:nginx/stable
    state: present

- name: Install Nginx
  apt: name=nginx update_cache={{ update_apt_cache }} state=installed
  tags: packages

- name: Copy the SSL certificate to the remote server
  copy: content="{{ ssl_crt }}" dest={{ ssl_dest_dir }}/{{ application_name }}.crt
  notify: restart nginx

- name: Copy the SSL private key to the remote server
  copy: content="{{ ssl_key }}" dest={{ ssl_dest_dir }}/{{ application_name }}.key
  notify: restart nginx

- name: Create dhparams.pem file
  copy: content="{{ dhparams }}" dest={{ nginx_dhparams_file }}
  notify: restart nginx

- name: Create nginx mount location
  file:
    path: "{{ nginx_cache_location }}"
    state: directory
    owner: www-data
    group: www-data
  tags: update-nginx-config

- name: Create Nginx configuration
  template:
    src: nginx_conf.j2
    dest: /etc/nginx/nginx.conf
    backup: yes
  notify: reload nginx
  tags: update-nginx-config, deploy

- name: Create Nginx site configuration file
  template: src={{ nginx_template }}.j2
            dest=/etc/nginx/sites-available/{{ nginx_configuration_name }}
            backup=yes
  notify: reload nginx
  tags: update-nginx-config, deploy

- name: Ensure that the default site is disabled
  file: path=/etc/nginx/sites-enabled/default
        state=absent
  notify: reload nginx
  tags: update-nginx-config

- name: Purge Nginx cache
  command: find {{ nginx_cache_location }} -delete
  notify: reload nginx
  tags: deploy, purge-nginx-cache

- name: Ensure that the application site is enabled
  file: src=/etc/nginx/sites-available/{{ nginx_configuration_name }}
        dest=/etc/nginx/sites-enabled/{{ nginx_configuration_name }}
        state=link
  notify: reload nginx
  tags: update-nginx-config

- name: Ensure Nginx service is started
  service: name=nginx state=started enabled=yes
  tags: update-nginx-config
