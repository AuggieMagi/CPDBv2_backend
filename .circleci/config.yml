version: 2
jobs:
  test_backend:
    docker:
      - image: cpdbdev/backend:latest
        user: gunicorn
      - image: cpdbdev/postgres:9.6
      - image: elasticsearch:5-alpine
      - image: selenium/standalone-chrome:3.11
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.circleci
      DB_HOST: localhost
      DB_USER: cpdb
      DB_PASSWORD: password
      DB_NAME: cpdb
    steps:
      - checkout
      - run: pip install --user -r requirements/test.txt
      - run: flake8
      - run: coverage run cpdb/manage.py test --noinput --nologcapture
      - run: coverage combine
      - run: coverage report --omit="/home/ubuntu/virtualenvs/*"
      - run: coveralls
      - store_artifacts:
          path: /usr/src/app/project/cpdb/test_visual_token_media

  push_backend_image:
    machine: true
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "False"
    steps:
      - checkout
      - run: echo "build-$CIRCLE_BUILD_NUM" > buildnum
      - persist_to_workspace:
          root: .
          paths:
            - buildnum
      - run:
          name: Build image
          command: docker build -t cpdbdev/backend:$(cat buildnum)
      - run:
          name: Push image
          command: docker push cpdbdev/backend:$(cat buildnum)

  deploy_backend:
    docker:
      - image: cpdbdev/kubectl:v1.11.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Reveal secrets
          command: |
            echo $GPG_PRIVATE_KEY | base64 -d > /tmp/gpg_private.gpg
            gpg --allow-secret-key-import --import /tmp/gpg_private.gpg
            git secret reveal
      - run:
          name: Apply deployment
          command: |
            if [ $CIRCLE_BRANCH == "master" ]
            then
              export NAMESPACE=production
              source prod.env
            else
              export NAMESPACE=staging
              source staging.env
            fi
            echo $KUBECONFIG_JSON > kube_config.json
            BACKEND_IMAGE_TAG=$(cat /tmp/workspace/buildnum) templater kubernetes/gunicorn.yml | kubectl --kubeconfig kube_config.json apply -f - --namespace=$NAMESPACE

  build_cpdpbot:
    machine: true
    steps:
      - checkout
      - run: echo "build-$CIRCLE_BUILD_NUM" > buildnum
      - persist_to_workspace:
          root: .
          paths:
            - buildnum
      - run:
          name: Build cpdpbot image
          command: docker build -t cpdbdev/cpdpbot:$(cat buildnum) docker/cpdpbot
      - run:
          name: Test cpdpbot image
          command: docker run -e "SETUP_LOGGING=no" --rm cpdbdev/cpdpbot:$(cat buildnum) python -m cpdpbot.test
      - run:
          name: Push cpdpbot image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push cpdbdev/cpdpbot:$(cat buildnum)

  deploy_cpdpbot:
    docker:
      - image: cpdbdev/kubectl:v1.11.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: echo $KUBECONFIG_JSON > kubeconfig.json
      - run:
          name: Reveal secrets
          command: |
            echo $GPG_PRIVATE_KEY | base64 -d > /tmp/gpg_private.gpg
            gpg --allow-secret-key-import --import /tmp/gpg_private.gpg
            git secret reveal
      - run:
          name: Deploy cpdpbot
          command: CPDPBOT_IMAGE_TAG=$(cat /tmp/workspace/buildnum) templater kubernetes/cpdpbot.yml -f prod.env | kubectl apply --namespace=production -f -

  deploy_ingress:
    docker:
      - image: cpdbdev/kubectl:v1.11.3
    steps:
      - checkout
      - run: echo $KUBECONFIG_JSON > kubeconfig.json
      - run:
          name: Reveal secrets
          command: |
            echo $GPG_PRIVATE_KEY | base64 -d > /tmp/gpg_private.gpg
            gpg --allow-secret-key-import --import /tmp/gpg_private.gpg
            git secret reveal
      - run:
          name: Install nginx ingress controller
          command: |
            kubectl apply --kubeconfig=kubeconfig.json -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml
            kubectl apply --kubeconfig=kubeconfig.json -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/provider/cloud-generic.yaml
      - run:
          name: Apply ingress
          command: |
            if [ $CIRCLE_BRANCH == "master" ]
            then
              export NAMESPACE=production
              export ENV_FILE=prod.env
            else
              export NAMESPACE=staging
              export ENV_FILE=staging.env
            fi
            set +e
            kubectl apply -f kubernetes/namespaces.yml
            kubectl create --kubeconfig=kubeconfig.json secret tls tls-secret --key tls_key --cert tls_cert --namespace=$NAMESPACE || true
            templater kubernetes/ingress.yml -f $ENV_FILE | kubectl apply --kubeconfig=kubeconfig.json --namespace=$NAMESPACE -f -


workflows:
  version: 2
  test_and_deploy_backend:
    jobs:
      - test_backend
      - push_backend_image:
          filters:
            branches:
              only:
                - staging
                - master
      - deploy_backend:
          requires:
            - push_backend_image

  deploy_cpdpbot:
    jobs:
      - build_cpdpbot:
          filters:
            branches:
              only:
                - staging
                - master
      - deploy_cpdpbot:
          filters:
            branches:
              only:
                - master

  deploy_ingress:
    jobs:
      - deploy_ingress:
          requires:
            - build_cpdpbot
