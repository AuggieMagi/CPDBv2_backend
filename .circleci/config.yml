version: 2

jobs:
  build_backend:
    machine: true
    steps:
      - checkout
      - run:
          name: Create hash of requirements folder
          command: find requirements -type f -exec md5sum {} \; | sort -k 2 > /tmp/requirements-hash.txt
      - restore_cache:
          keys:
            - v1-backend-docker-layers-{{ checksum "Dockerfile" }}-{{ checksum "/tmp/requirements-hash.txt" }}-{{ .Branch }}
            - v1-backend-docker-layers-{{ checksum "Dockerfile" }}-{{ checksum "/tmp/requirements-hash.txt" }}-
            - v1-backend-docker-layers-{{ checksum "Dockerfile" }}-
            - v1-backend-docker-layers-
      - run:
          name: Load Docker image layer cache
          command: |
            set -o pipefail
            if [ -f /caches/v2_backend_docker_layers.tar.gz ]; then
              gunzip -c /caches/v2_backend_docker_layers.tar.gz | docker load
              docker images
            fi
      - run:
          name: Docker login
          command: docker login cpdpacr.azurecr.io -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET
      - run:
          name: Build Docker image tag with commit hash
          command: docker build -t cpdbdev/cpdbv2_backend:$CIRCLE_SHA1 .
      - run:
          name: Push image tag with commit hash
          command: docker push cpdbdev/cpdbv2_backend:$CIRCLE_SHA1
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker history -q cpdbdev/cpdbv2_backend:$CIRCLE_SHA1 | sed '/^<missing/ d' > /tmp/layers.txt
            docker save $(cat /tmp/layers.txt) | gzip > /caches/v2_backend_docker_layers.tar.gz
      - save_cache:
          key: v1-backend-docker-layers-{{ checksum "Dockerfile" }}-{{ checksum "/tmp/requirements-hash.txt" }}-{{ .Branch }}
          paths:
            - /caches/

  test:
    docker:
      - image: circleci/classic:latest
      - image: cpdbdev/postgis:latest
        auth:
          username: $ARM_CLIENT_ID
          password: $ARM_CLIENT_SECRET
        command: postgres
      - image: elasticsearch:5-alpine
      - image: selenium/standalone-chrome:3.11
    steps:
      - checkout
      - run:
          name: Docker login
          command: docker login cpdpacr.azurecr.io -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET
      - run:
          name: Docker pull image
          command: docker pull cpdbdev/cpdbv2_backend:$CIRCLE_SHA1
      - run:
          name: Run flake8 against code
          command: docker run --rm cpdbdev/cpdbv2_backend:$CIRCLE_SHA1 flake8
      - run:
          name: Test while record coverage
          command: docker run --rm cpdbdev/cpdbv2_backend:$CIRCLE_SHA1 -v $(pwd):/usr/src/app sh -c "coverage run cpdb/manage.py test --noinput --nologcapture"
      - run:
          name: Coverage report
          command: docker run --rm cpdbdev/cpdbv2_backend:$CIRCLE_SHA1 -v $(pwd):/usr/src/app sh -c "coverage combine && coverage report"
      - run:
          name: Submit coverage report to coveralls
          command: docker run --rm cpdbdev/cpdbv2_backend:$CIRCLE_SHA1 -v $(pwd):/usr/src/app coveralls

  build_backend_with_tag:
    machine: true
    steps:
      - checkout
      - run:
          name: Create hash of requirements folder
          command: find requirements -type f -exec md5sum {} \; | sort -k 2 > /tmp/requirements-hash.txt
      - restore_cache:
          keys:
            - v1-backend-docker-layers-{{ checksum "Dockerfile" }}-{{ checksum "/tmp/requirements-hash.txt" }}-
            - v1-backend-docker-layers-{{ checksum "Dockerfile" }}-
            - v1-backend-docker-layers-
      - run:
          name: Load Docker image layer cache
          command: |
            set -o pipefail
            if [ -f /caches/v2_backend_docker_layers.tar.gz ]; then
              gunzip -c /caches/v2_backend_docker_layers.tar.gz | docker load;
              docker images;
            fi
      - run: docker build -t cpdbdev/cpdbv2_backend:$CIRCLE_TAG
      - run: docker build -t cpdbdev/cpdbv2_backend:latest .
      - run: docker build -t cpdbdev/cpdbv2_backend:$CIRCLE_SHA1 .
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Push tagged image
          command: docker push cpdbdev/cpdbv2_backend:$CIRCLE_TAG
      - run:
          name: Push latest image
          command: docker push cpdbdev/cpdbv2_backend:latest
      - run:
          name: Login to Azure Container Registry
          command: docker login cpdpacr.azurecr.io -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET
      - run:
          name: Push image tag with commit hash
          command: docker push cpdbdev/cpdbv2_backend:$CIRCLE_SHA1

  build_postgis:
    docker:
      - image: microsoft/azure-cli
    steps:
      - checkout
      - run: az acr build --registry cpdpacr --image cpdbdev/postgis:latest .

  deploy:
    docker:
      - image: cpdbdev/cpdbv2_backend:0.1.0
    environment:
      - ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - run:
          command: bin/circleci_deploy_staging
          no_output_timeout: 60m

  build_cpdpbot:
    machine: true
    steps:
      - checkout
      - run:
          name: Build cpdpbot image
          command: docker build -t cpdbdev/cpdpbot:$(cat docker/cpdpbot/VERSION) docker/cpdpbot
      - run:
          name: Test cpdpbot image
          command: docker run --rm cpdbdev/cpdpbot:$(cat docker/cpdpbot/VERSION) python -m cpdpbot.test
      - run:
          name: Push cpdpbot image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push cpdbdev/cpdpbot:$(cat docker/cpdpbot/VERSION)

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_postgis:
          filters:
            branches:
              only:
                - master
                - staging
      - build_backend
      - test:
          requires:
            - build_backend

  build_tag:
    jobs:
      - build_backend_with_tag:
          filters:
            tags:
              only: /^v[\d\.]+$/
            branches:
              ignore: /.*/
      - test:
          requires:
            - build_backend_with_tag
          filters:
            tags:
              only: /^v[\d\.]+$/
            branches:
              ignore: /.*/

  test_deploy_cpdpbot:
    jobs:
      - build_cpdpbot
